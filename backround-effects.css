/**
 * Jay's Mobile Wash - Background Effects
 * Version: 1.0.0
 * Last Updated: 2025-06-30
 * 
 * This file contains all background effects and visual enhancements
 * for the Jay's Mobile Wash website.
 */

/* ----------------------------------------------------------- 
 * TABLE OF CONTENTS:
 * 1. Hero Section Background
 * 2. Animated Gradient Overlays
 * 3. Particle Effects
 * 4. Section Dividers & Wave Shapes
 * 5. Pattern Backgrounds
 * 6. Water & Bubble Effects
 * 7. Animated Light Reflections
 * 8. Responsive Adjustments
 * ----------------------------------------------------------- */

/* 1. Hero Section Background
 * ----------------------------------------------------------- */
.hero-section {
    background: linear-gradient(135deg, rgba(31, 41, 55, 0.9), rgba(17, 24, 39, 0.9)), 
                url('images/hero-bg.webp');
    background-size: cover;
    background-position: center;
    background-attachment: fixed;
    position: relative;
    overflow: hidden;
}

/* Water droplet overlay */
.hero-section::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: url('images/water-droplets.png');
    background-size: cover;
    opacity: 0.15;
    z-index: 1;
    pointer-events: none;
}

/* Animated gradient overlay */
.hero-section::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(45deg, 
                rgba(79, 70, 229, 0.2) 0%, 
                rgba(168, 85, 247, 0.2) 33%, 
                rgba(236, 72, 153, 0.2) 66%, 
                rgba(79, 70, 229, 0.2) 100%);
    background-size: 400% 400%;
    animation: gradientShift 15s ease infinite;
    z-index: 0;
    mix-blend-mode: overlay;
    pointer-events: none;
}

.hero-content {
    position: relative;
    z-index: 2;
}

@keyframes gradientShift {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
}

/* 2. Animated Gradient Overlays
 * ----------------------------------------------------------- */
.gradient-bg {
    position: relative;
    overflow: hidden;
}

.gradient-bg::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, 
                rgba(79, 70, 229, 0.05) 0%, 
                rgba(168, 85, 247, 0.05) 50%, 
                rgba(236, 72, 153, 0.05) 100%);
    background-size: 200% 200%;
    animation: gradientFlow 10s ease infinite;
    z-index: 0;
}

.services-preview {
    background: linear-gradient(to bottom, #ffffff, #f9fafb);
    position: relative;
}

.testimonials {
    background: linear-gradient(to bottom, #f9fafb, #ffffff);
    position: relative;
}

.process {
    background: linear-gradient(to bottom, #ffffff, #f5f7fa);
    position: relative;
}

.cta-section {
    background: linear-gradient(rgba(31, 41, 55, 0.85), rgba(31, 41, 55, 0.95)), 
                url('images/cta-bg.webp');
    background-size: cover;
    background-position: center;
    background-attachment: fixed;
    position: relative;
    overflow: hidden;
}

.cta-section::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: radial-gradient(circle at center, 
                rgba(79, 70, 229, 0.4) 0%, 
                rgba(31, 41, 55, 0) 70%);
    z-index: 0;
    animation: pulseGlow 8s ease-in-out infinite;
}

@keyframes pulseGlow {
    0% { transform: scale(1); opacity: 0.4; }
    50% { transform: scale(1.2); opacity: 0.2; }
    100% { transform: scale(1); opacity: 0.4; }
}

@keyframes gradientFlow {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
}

/* 3. Particle Effects
 * ----------------------------------------------------------- */
.particles-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 0;
    overflow: hidden;
    pointer-events: none;
}

.particle {
    position: absolute;
    border-radius: 50%;
    opacity: 0.6;
    animation: float 15s infinite ease-in-out;
}

.particle-blue {
    background-color: rgba(79, 70, 229, 0.3);
    box-shadow: 0 0 10px rgba(79, 70, 229, 0.5);
}

.particle-purple {
    background-color: rgba(168, 85, 247, 0.3);
    box-shadow: 0 0 10px rgba(168, 85, 247, 0.5);
}

.particle-pink {
    background-color: rgba(236, 72, 153, 0.3);
    box-shadow: 0 0 10px rgba(236, 72, 153, 0.5);
}

@keyframes float {
    0% {
        transform: translateY(0) translateX(0) rotate(0);
    }
    33% {
        transform: translateY(-20px) translateX(10px) rotate(120deg);
    }
    66% {
        transform: translateY(10px) translateX(-15px) rotate(240deg);
    }
    100% {
        transform: translateY(0) translateX(0) rotate(360deg);
    }
}

/* Generate particles with JavaScript */
.generate-particles {
    animation: none !important; /* This is just a marker class for JS */
}

/* 4. Section Dividers & Wave Shapes
 * ----------------------------------------------------------- */
.wave-divider {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    overflow: hidden;
    line-height: 0;
    transform: rotate(180deg);
    z-index: 2;
}

.wave-divider svg {
    position: relative;
    display: block;
    width: calc(100% + 1.3px);
    height: 70px;
}

.wave-divider.top {
    top: 0;
    bottom: auto;
    transform: rotate(0deg);
}

.wave-divider.white .shape-fill {
    fill: #FFFFFF;
}

.wave-divider.light-gray .shape-fill {
    fill: #f9fafb;
}

.wave-divider.dark .shape-fill {
    fill: #1f2937;
}

/* Curved section divider */
.curve-divider {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    overflow: hidden;
    line-height: 0;
    z-index: 2;
}

.curve-divider svg {
    position: relative;
    display: block;
    width: calc(100% + 1.3px);
    height: 50px;
}

.curve-divider.top {
    top: 0;
    bottom: auto;
    transform: rotate(180deg);
}

.curve-divider.white .shape-fill {
    fill: #FFFFFF;
}

.curve-divider.light-gray .shape-fill {
    fill: #f9fafb;
}

.curve-divider.dark .shape-fill {
    fill: #1f2937;
}

/* Arrow divider */
.arrow-divider {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    overflow: hidden;
    line-height: 0;
    z-index: 2;
}

.arrow-divider svg {
    position: relative;
    display: block;
    width: calc(100% + 1.3px);
    height: 30px;
}

.arrow-divider.top {
    top: 0;
    bottom: auto;
    transform: rotate(180deg);
}

.arrow-divider.white .shape-fill {
    fill: #FFFFFF;
}

.arrow-divider.light-gray .shape-fill {
    fill: #f9fafb;
}

/* 5. Pattern Backgrounds
 * ----------------------------------------------------------- */
.pattern-bg {
    position: relative;
}

.pattern-dots {
    background-image: radial-gradient(rgba(79, 70, 229, 0.1) 1px, transparent 1px);
    background-size: 20px 20px;
    background-position: 0 0;
}

.pattern-grid {
    background-image: linear-gradient(rgba(168, 85, 247, 0.05) 1px, transparent 1px),
                      linear-gradient(90deg, rgba(168, 85, 247, 0.05) 1px, transparent 1px);
    background-size: 20px 20px;
}

.pattern-diagonal {
    background-image: repeating-linear-gradient(45deg, 
                      rgba(236, 72, 153, 0.03) 0px, 
                      rgba(236, 72, 153, 0.03) 2px, 
                      rgba(255, 255, 255, 0) 2px, 
                      rgba(255, 255, 255, 0) 10px);
}

.pattern-noise {
    position: relative;
}

.pattern-noise::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0.05;
    background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 200 200' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.65' numOctaves='3' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)'/%3E%3C/svg%3E");
    z-index: 0;
    pointer-events: none;
}

.faq {
    background-color: #f9fafb;
    position: relative;
}

.faq.pattern-dots::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: radial-gradient(rgba(79, 70, 229, 0.1) 1px, transparent 1px);
    background-size: 20px 20px;
    z-index: 0;
    pointer-events: none;
}

/* 6. Water & Bubble Effects
 * ----------------------------------------------------------- */
.bubble-container {
    position: absolute;
    bottom: -100px;
    width: 100%;
    height: 100%;
    overflow: hidden;
    z-index: 0;
    pointer-events: none;
}

.bubble {
    position: absolute;
    bottom: 0;
    background: radial-gradient(circle at 50% 50%, 
                rgba(255, 255, 255, 0.8) 0%, 
                rgba(255, 255, 255, 0.3) 50%, 
                rgba(255, 255, 255, 0) 100%);
    border-radius: 50%;
    animation: bubbleRise linear infinite;
    opacity: 0;
}

@keyframes bubbleRise {
    0% {
        transform: translateY(0) scale(0.1);
        opacity: 0;
    }
    20% {
        opacity: 0.6;
    }
    50% {
        opacity: 0.4;
    }
    100% {
        transform: translateY(-1000px) scale(0.8);
        opacity: 0;
    }
}

.water-ripple {
    position: absolute;
    border-radius: 50%;
    border: 2px solid rgba(255, 255, 255, 0.3);
    transform: scale(0);
    animation: rippleEffect 4s linear infinite;
    opacity: 0;
}

@keyframes rippleEffect {
    0% {
        transform: scale(0);
        opacity: 0.6;
    }
    100% {
        transform: scale(5);
        opacity: 0;
    }
}

/* Wipe effect */
.wipe-effect {
    position: relative;
    overflow: hidden;
}

.wipe-effect::after {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, 
                rgba(255, 255, 255, 0) 0%, 
                rgba(255, 255, 255, 0.3) 50%, 
                rgba(255, 255, 255, 0) 100%);
    animation: wipeAnimation 3s ease-in-out infinite;
    z-index: 1;
    pointer-events: none;
}

@keyframes wipeAnimation {
    0% { left: -100%; }
    50% { left: 100%; }
    100% { left: 100%; }
}

/* 7. Animated Light Reflections
 * ----------------------------------------------------------- */
.reflection {
    position: absolute;
    width: 100px;
    height: 100px;
    border-radius: 50%;
    background: radial-gradient(circle at 50% 50%, 
                rgba(255, 255, 255, 0.3) 0%, 
                rgba(255, 255, 255, 0) 70%);
    animation: moveReflection 8s infinite ease-in-out;
    z-index: 1;
    pointer-events: none;
}

@keyframes moveReflection {
    0% {
        transform: translate(0, 0);
        opacity: 0.3;
    }
    25% {
        transform: translate(30px, 20px);
        opacity: 0.5;
    }
    50% {
        transform: translate(10px, 40px);
        opacity: 0.3;
    }
    75% {
        transform: translate(-20px, 10px);
        opacity: 0.5;
    }
    100% {
        transform: translate(0, 0);
        opacity: 0.3;
    }
}

.light-beam {
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: radial-gradient(circle at 50% 50%, 
                rgba(255, 255, 255, 0) 0%, 
                rgba(255, 255, 255, 0.03) 40%, 
                rgba(255, 255, 255, 0) 60%);
    transform-origin: center center;
    animation: rotateBeam 30s linear infinite;
    z-index: 0;
    pointer-events: none;
}

@keyframes rotateBeam {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* 8. Responsive Adjustments
 * ----------------------------------------------------------- */
@media (max-width: 768px) {
    .wave-divider svg,
    .curve-divider svg {
        height: 40px;
    }
    
    .arrow-divider svg {
        height: 20px;
    }
    
    .particle {
        display: none; /* Hide particles on mobile for better performance */
    }
    
    /* Use simpler animations on mobile */
    .hero-section::after {
        animation-duration: 20s;
    }
    
    .gradient-bg::before {
        animation-duration: 15s;
    }
}

/* Reduce animations for users who prefer reduced motion */
@media (prefers-reduced-motion: reduce) {
    .hero-section::after,
    .gradient-bg::before,
    .particle,
    .bubble,
    .water-ripple,
    .wipe-effect::after,
    .reflection,
    .light-beam,
    .cta-section::before {
        animation: none !important;
    }
}

/* Background initialization script - Added inline to ensure it runs */
document.addEventListener('DOMContentLoaded', function() {
    // Create particles
    const particlesContainer = document.querySelector('.particles-container') || createParticlesContainer();
    
    // Generate particles
    generateParticles(particlesContainer, 20);
    
    // Generate water bubbles
    const bubbleContainer = document.querySelector('.bubble-container') || createBubbleContainer();
    generateBubbles(bubbleContainer, 15);
    
    // Generate reflections
    addReflections();
    
    // Add wave dividers
    addWaveDividers();
    
    // Log initialization
    console.log('Background effects initialized - v20250630042117');
    
    // Helper function to create particles container if it doesn't exist
    function createParticlesContainer() {
        const container = document.createElement('div');
        container.className = 'particles-container';
        document.querySelector('.hero-section').appendChild(container);
        return container;
    }
    
    // Helper function to create bubble container if it doesn't exist
    function createBubbleContainer() {
        const container = document.createElement('div');
        container.className = 'bubble-container';
        document.querySelector('.cta-section').appendChild(container);
        return container;
    }
    
    // Generate particles with random properties
    function generateParticles(container, count) {
        for (let i = 0; i < count; i++) {
            const particle = document.createElement('div');
            
            // Randomly select particle color class
            const colorClasses = ['particle-blue', 'particle-purple', 'particle-pink'];
            const colorClass = colorClasses[Math.floor(Math.random() * colorClasses.length)];
            
            particle.className = `particle ${colorClass}`;
            
            // Random position
            const x = Math.random() * 100;
            const y = Math.random() * 100;
            
            // Random size between 5px and 20px
            const size = 5 + Math.random() * 15;
            
            // Random animation delay
            const delay = Math.random() * 15;
            
            // Apply styles
            particle.style.cssText = `
                left: ${x}%;
                top: ${y}%;
                width: ${size}px;
                height: ${size}px;
                animation-delay: ${delay}s;
                opacity: ${0.3 + Math.random() * 0.4};
            `;
            
            container.appendChild(particle);
        }
    }
    
    // Generate bubble animations
    function generateBubbles(container, count) {
        for (let i = 0; i < count; i++) {
            setTimeout(() => {
                const bubble = document.createElement('div');
                bubble.className = 'bubble';
                
                // Random position along width
                const x = 5 + Math.random() * 90;
                
                // Random size
                const size = 10 + Math.random() * 30;
                
                // Random animation duration
                const duration = 10 + Math.random() * 20;
                
                // Apply styles
                bubble.style.cssText = `
                    left: ${x}%;
                    width: ${size}px;
                    height: ${size}px;
                    animation-duration: ${duration}s;
                    animation-delay: ${i * 2}s;
                `;
                
                container.appendChild(bubble);
                
                // Remove bubble after animation completes
                setTimeout(() => {
                    bubble.remove();
                }, duration * 1000);
                
                // Continue generating bubbles
                if (document.body.contains(container)) {
                    generateBubbles(container, 1);
                }
                
            }, i * 2000);
        }
    }
    
    // Add light reflections
    function addReflections() {
        const sections = document.querySelectorAll('.services-preview, .testimonials, .process');
        
        sections.forEach(section => {
            const reflection = document.createElement('div');
            reflection.className = 'reflection';
            
            // Random position
            const x = 20 + Math.random() * 60;
            const y = 20 + Math.random() * 60;
            
            // Random size
            const size = 100 + Math.random() * 200;
            
            // Random animation delay
            const delay = Math.random() * 5;
            
            // Apply styles
            reflection.style.cssText = `
                left: ${x}%;
                top: ${y}%;
                width: ${size}px;
                height: ${size}px;
                animation-delay: ${delay}s;
            `;
            
            // Add relative positioning to section if needed
            if (getComputedStyle(section).position === 'static') {
                section.style.position = 'relative';
            }
            
            section.appendChild(reflection);
            
            // Add light beam to some sections
            if (Math.random() > 0.5) {
                const beam = document.createElement('div');
                beam.className = 'light-beam';
                section.appendChild(beam);
            }
        });
    }
    
    // Add wave dividers between sections
    function addWaveDividers() {
        const sections = document.querySelectorAll('section');
        
        sections.forEach((section, index) => {
            if (index < sections.length - 1) {
                const nextSection = sections[index + 1];
                const sectionBgColor = getComputedStyle(section).backgroundColor;
                const nextSectionBgColor = getComputedStyle(nextSection).backgroundColor;
                
                // Only add dividers between sections with different background colors
                if (sectionBgColor !== nextSectionBgColor) {
                    // Choose a random divider style
                    const dividerTypes = ['wave-divider', 'curve-divider', 'arrow-divider'];
                    const dividerType = dividerTypes[Math.floor(Math.random() * dividerTypes.length)];
                    
                    // Determine fill color based on next section
                    let fillClass = 'white';
                    if (nextSectionBgColor.includes('rgb(249, 250, 251)')) {
                        fillClass = 'light-gray';
                    } else if (nextSectionBgColor.includes('rgb(31, 41, 55)')) {
                        fillClass = 'dark';
                    }
                    
                    const divider = document.createElement('div');
                    divider.className = `${dividerType} ${fillClass}`;
                    divider.innerHTML = `
                        <svg data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1200 120" preserveAspectRatio="none">
                            ${getDividerPath(dividerType)}
                        </svg>
                    `;
                    
                    // Add relative positioning to section if needed
                    if (getComputedStyle(section).position === 'static') {
                        section.style.position = 'relative';
                    }
                    
                    section.appendChild(divider);
                }
            }
        });
    }
    
    // Get SVG path based on divider type
    function getDividerPath(dividerType) {
        switch (dividerType) {
            case 'wave-divider':
                return '<path d="M321.39,56.44c58-10.79,114.16-30.13,172-41.86,82.39-16.72,168.19-17.73,250.45-.39C823.78,31,906.67,72,985.66,92.83c70.05,18.48,146.53,26.09,214.34,3V0H0V27.35A600.21,600.21,0,0,0,321.39,56.44Z" class="shape-fill"></path>';
            case 'curve-divider':
                return '<path d="M0,0V46.29c47.79,22.2,103.59,32.17,158,28,70.36-5.37,136.33-33.31,206.8-37.5C438.64,32.43,512.34,53.67,583,72.05c69.27,18,138.3,24.88,209.4,13.08,36.15-6,69.85-17.84,104.45-29.34C989.49,25,1113-14.29,1200,52.47V0Z" class="shape-fill"></path>';
            case 'arrow-divider':
                return '<path d="M649.97 0L550.03 0 599.91 54.12 649.97 0z" class="shape-fill"></path>';
            default:
                return '<path d="M321.39,56.44c58-10.79,114.16-30.13,172-41.86,82.39-16.72,168.19-17.73,250.45-.39C823.78,31,906.67,72,985.66,92.83c70.05,18.48,146.53,26.09,214.34,3V0H0V27.35A600.21,600.21,0,0,0,321.39,56.44Z" class="shape-fill"></path>';
        }
    }
});
